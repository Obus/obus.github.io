<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Категория: Оптимизация | DataDeep]]></title>
  <link href="http://datadeep.ru/blog/categories/optimizatsiia/atom.xml" rel="self"/>
  <link href="http://datadeep.ru/"/>
  <updated>2014-11-14T15:00:52+04:00</updated>
  <id>http://datadeep.ru/</id>
  <author>
    <name><![CDATA[Команда datadeep.ru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Оптимизация в машинном обучении]]></title>
    <link href="http://datadeep.ru/blog/2014/11/14/optimizatsiia-v-mashinnom-obuchienii/"/>
    <updated>2014-11-14T12:07:51+04:00</updated>
    <id>http://datadeep.ru/blog/2014/11/14/optimizatsiia-v-mashinnom-obuchienii</id>
    <content type="html"><![CDATA[<p><img src="http://bayesgroup.ru/wp-content/uploads/2013/04/momo.jpg" alt="enter image description here" />
<script type="math/tex">
\newcommand{loss}{\ell}
\newcommand{risk}{F}
\newcommand{hyp}{h}
</script></p>

<p>Привет, читатель! Обсуждая науку о данных, нельзя не упомянуть машинное обучение. А говоря о машинном обучении, никак невозможно пройти мимо такой темы как <em>оптимизация</em>. Что же такое оптимизация и какая она бывает? Как оптимизация связана с машинным обучением? К как быть быстрее, оптимальнее, точнее? </p>

<p>Если эти вопросы вызывают интерес — добро пожаловать.</p>

<!-- more -->

<h2 id="section">Связь оптимизации и машинного обученния</h2>

<p>Что такое оптимизация? В двух словах, оптимизация (как область знаний) изучает как <em>что-то</em> сделать <em>лучше</em>. Вернее, как <em>что-то</em> сделать <em>наилучшим образом</em>, то есть — <em>оптимально</em>. Оптимальность, обычно, понимается в смысле максимизации или минимизации определенного значения. Например, мы можем искать наиболее выгодную стратегию игры на бирже, максимизируя ожидаемую прибыль, или аэродинамически наиболее эффективную форму кузова автомобиля, минимизируя сопротивление воздуха. Конечно же, этими примерами оптимизация не ограничивается, встречаясь повсеместно. Можно даже придти к выводу, что практически любой процесс — оптимизационный с той или иной точки зрения, но это уже философия.</p>

<p>Разобравшись с оптимизацией “на пальцах”, определим ее формально. А формально, задача математической оптимизации записывается следующим образом:</p>

<script type="math/tex; mode=display">
\risk(\theta) \longrightarrow \min\limits_{\theta\in\mathcal{X}}
</script>

<p>Так вот, просто и незатейливо. Но постойте, кто эти <script type="math/tex">\risk</script>, <script type="math/tex">\theta</script>, <script type="math/tex">\mathcal{X}</script> и какое отношение они имеют к машинному обучению?</p>

<p>Оказывается, большинство задач машинного обучения формулируются именно таким образом: в виде минимизации некоего функционала <script type="math/tex">\risk</script> по некоторому параметру <script type="math/tex">\theta</script>. Например, в случае задачи классификации или регрессии мы стараемся предсказывать одну переменную (<script type="math/tex">y</script>) на основе другой (<script type="math/tex">x</script>) с помощью набора функций–“оракулов” <script type="math/tex">\{\hyp_\theta\}_{\theta\in\mathcal{X}}</script>, выбирая наилучшую из них на основе <em>обучающей выборки</em> <script type="math/tex">\{x_i, y_i\}_1^N</script> — в таком случае мы хотим минимизировать ошибку предсказания на имющейся выборке. Ошибку предсказания чаще всего записывают как</p>

<script type="math/tex; mode=display"> \risk(\theta) = \sum_{i=1}^n \loss(\hyp_{\theta}(x_i), y_i),</script>

<p>где <script type="math/tex">\loss(\hyp_{\theta}(x_i), y_i)</script> — мера отличия предсказания <script type="math/tex">\hyp_{\theta}(x_i)</script> от истинного значения <script type="math/tex">y_i</script>. Чтобы не витать в облаках, рассмотрим конкретный вид <script type="math/tex">\risk(\theta)</script> для двух распространенных методов машинного обучения: метода <script type="math/tex">K</script>-средних и линейной регрессии с квадратичной функцией потерь.</p>

<h4 id="k-">Метод <script type="math/tex">K</script>-средних</h4>

<p>Этот метод решает задачу задачу кластеризации — разбиения множества точек <script type="math/tex">\{x_i\}_1^N</script> на <script type="math/tex">K</script> (<script type="math/tex">\leq N</script>) непересекающихся множеств–кластеров.  Результат кластеризации методом $K$-средних — это, во-первых, разбиение множества ${1,\ldots,N}$ на <script type="math/tex">K</script> кластеров: <script type="math/tex">\{\mathcal{C}_k\}_1^K</script> и, во-вторых, центр каждого из кластеров: <script type="math/tex">\{c_k\}_1^K</script>. Функция <script type="math/tex">\risk(\theta)</script> для метода $K$-средних записывается следующим образом</p>

<script type="math/tex; mode=display">
\risk\left(\theta = (K, \{\mathcal{C}_k\}_1^K, \{c_k\}_1^K)\right) = \sum_{k=1}^K \sum_{i\in \mathcal{C}_k} (x_i - c_k)^2 \to \min\limits_{\theta},
</script>

<p>— <script type="math/tex">K</script>-средних ищет такое разбиение множества <script type="math/tex">\{x_i\}_1^N</script> на кластера, чтобы сумма расстояний от каждой точки до центра кластера, которому она принадлежит, была минимальна.</p>

<h4 id="section-1">Линейная регрессия с квадратичной функцией потерь</h4>

<p>Этот метод решает задачу регрессии — предсказания выходов <script type="math/tex">y_i\in\mathrm{R}</script> по входам <script type="math/tex">x_i=(x_i^{(1)},\ldots,x_i^{(p)})^T\in\mathrm{R}^p</script> на основе обучающей выборки <script type="math/tex">\{ x_i, y_i \}_1^N</script>. Метод линейной регрессии “предполагает”, что выход <script type="math/tex">y</script> может быть представлен в виде линейной комбинации входов <script type="math/tex">x_i^{(1)},\ldots,x_i^{(p)}</script>: <script type="math/tex">y = \sum_{j=1}^p \theta^{(j)} x^{(j)}</script>. <script type="math/tex">\risk(\theta)</script> записывается следующим образом:</p>

<script type="math/tex; mode=display">
\risk(\theta) = \sum_{i=1}^N (x_i^T\theta - y_i)^2 \to \min\limits_{\theta},
</script>

<p>— здесь минимизируется среднеквадратичное отклонение “предсказаний” <script type="math/tex">x_i^T\theta</script> от истинных значений <script type="math/tex">y_i</script>.</p>

<p>Таким образом, и метод <script type="math/tex">K</script>-средних и линейная регрессия минимизируют конкретные функции <script type="math/tex">F(\theta)</script> (вся хитрость методов, в том <strong>как</strong> они это делают), решая частные задачи оптимизации. Приложив определенные усилия, функция <script type="math/tex">\risk(\theta)</script> может быть выписана для сколь угодно сложной модели, даже для какой-нибудь сверточной нейронной сети (но мы этого делать не будем).</p>

<p>Думаю, что теперь вполне очевидно, что в машинном обучении оптимизация играет очень важную роль.</p>

<h2 id="section-2">Математическая оптимизация</h2>

<p>Решив, что оптимизация в машинном обучении, а значит и в нашем арсенале — must have, обсудим ее по-подробнее.</p>

<p>Математическая оптимизация зародилась в 18–19 века и окончательно оформилась в 20 веке. За этот срок у нее появилось множество видов, подвидов, методов и приложений. Как мы и упомянали выше, общая задача оптимизации ставится следующим образом</p>

<script type="math/tex; mode=display">
\risk(\theta) \longrightarrow \min\limits_{\theta\in\mathcal{X}},
</script>

<p>но от настолько общей постановки мало толку — совершенно непонятно как ее решать: не имея информации о природе <script type="math/tex">\risk</script> и <script type="math/tex">\mathcal{X}</script> мы безоружны, можем только в слепую тыкать “пальцем в небо” (вернее, в <script type="math/tex">\mathcal{X}</script>) в надежде попасть в точку минимума.
Собственно, чем не вариант, есть даже схожий по идее метод, с вполне себе научным название: метод <em>равномерного поиска</em> (aka перебора). Суть его, как вы уже догадались, состоит в том, чтобы наложить <script type="math/tex">\varepsilon</script>-сетку на множество <script type="math/tex">\mathcal{X}</script> и измерить функцию <script type="math/tex">\risk</script> в каждом узле сетки. Так найдется узел <script type="math/tex">\hat\theta</script> с наименьшим значением <script type="math/tex">\risk</script>, и … ничего.
Без дополнительных ограничений на <script type="math/tex">\risk</script> и/или <script type="math/tex">\mathcal{X}</script> наш <script type="math/tex">\hat\theta</script> не говорит ничего ни о наимаеньшем значении <script type="math/tex">\risk_* = \min\limits_{\theta\in\mathcal{X}} \risk(\theta)</script> не о соответствующем аргументе <script type="math/tex">\theta_* = \arg\min\limits_{\theta\in\mathcal{X}} \risk(\theta)</script>. Действительно, <script type="math/tex">\risk</script> может меняться сколь угодно быстро, принимая между узлами сетки какие угодно значения а то и вовсе быть разрывной, то есть знания о функции в узлах не говорит ничего о ней же вну этих узлов. Так вот, старались-старались, мерели-мерели, а сидим теперь у разбитого корыта.</p>

<p>Но унывать всякий может, а надо это дело исправить.</p>

<p><script type="math/tex">-</script> В чем наша проблема?</p>

<p><script type="math/tex">-</script> Проблема в излишнней свободе функции $\risk$, точнее в неограниченной скорости ее изменения. </p>

<pre><code>Так давайте ее ограничим! Например, вот так:
</code></pre>

<script type="math/tex; mode=display">
|\risk(\theta_1) - \risk(\theta_2)| \leq L |\theta_1 - \theta_2|,
</script>

<p>— мы запретили <script type="math/tex">\risk</script> менятся как угодно быстро, ограничив ее изменение линейно изменением ее аргумента (это условие на <script type="math/tex">\risk</script>, называется <em>условием Липшица</em>). Теперь наша оценка <script type="math/tex">\hat\theta</script> кое-чего стоит:</p>

<script type="math/tex; mode=display">|\risk(\hat\theta) - \risk_*| \leq \varepsilon L \sqrt{p}, </script>

<p>где <script type="math/tex">p</script> — размерность <script type="math/tex">\mathcal{X}</script>. Местоположении <script type="math/tex">\theta_*</script>, однако, до сих пор остается загадкой.</p>

<p>Можно продолжить модифицировать метод перебора, добиваясь больших гарантия точности (как по параметру так и позначению функции) и увеличивая вычислительную эффективность (мы вычислили <script type="math/tex">\risk</script> порядка <script type="math/tex">O\left(\frac{V(\mathcal{X})}{\varepsilon^p}\right)</script> раз, где <script type="math/tex">V(\mathcal{X})</script> — объем <script type="math/tex">\mathcal{X}</script>, что даже в невинном единичном кубе при <script type="math/tex">\varepsilon = 0.01</script> даст миллион). Но это займет немало времени, а метод перебора интересен нам сейчас с той только точки зрения, что демонстрирует две важные идеи.</p>

<ol>
  <li><a href="http://www.no-free-lunch.org/">There is no free lucnh</a>. Чтобы эффективно решить задачу оптимизации нам нужно ее ограничить — сузить круг поисков. Тем быстрее и точнее мы хотим ее решить, тем более жесткие ограничения нам придется накладывать.</li>
  <li>Лучшее — враг хорошего. Иногда достаточно найти приближенное к оптимальному решение, сэкономив при этом на ресурсах.</li>
</ol>

<p>Как было сказано, оптимизация как наука обширна и изучает множество различных задач и методов. Все, однако, нам рассматривать не нужно: в машинном обучении актуальны только некоторые из них, в частности очень распространены так называемые <em>градиентные методы</em>. Нам градиентные методы интересны как с точки зрения того, что развивают две усвоенные ранее идеи, так и из тех соображений, что они являются основой для многих других методов оптимизации. Именно о градиентных методах и пойдет речь далее.</p>

<h2 id="section-3">Градиентные методы</h2>

<p>Идея градиентных методов в том, что в каждой точке <script type="math/tex">\theta_0</script> мы можем измерить градиент функции <script type="math/tex">\nabla \risk(\theta_0)</script>, который подскажет нам, как изменяется функция в окрестности <script type="math/tex">\theta</script>. Попробуем объяснить, откуда растут ноги у этой идеи: зафиксируем <script type="math/tex">\theta_0</script>, <script type="math/tex">\delta</script> и расмотрим разложение функции <script type="math/tex">\risk</script> в ряд Тейлора в точке <script type="math/tex">\theta_0 + \delta</script>:</p>

<script type="math/tex; mode=display">
\risk(\theta_0 + \delta) = \risk(\theta_0) +
\nabla \risk(\theta)\delta +
\nabla^2 \risk(\theta_0) \frac{\delta^2}{2} +
\ldots +
\nabla^n \risk(\theta_0) \frac{\delta^n}{n!} +
\ldots
</script>

<p><script type="math/tex">\delta</script> предполагается достаточно малым, поэтому <script type="math/tex">\delta^n</script> убывает очень быстро и обычно рассматривают только первую компоненту:</p>

<script type="math/tex; mode=display">
\risk(\theta_0 + \delta) \sim \risk(\theta_0) +
\nabla \risk(\theta)\delta.
</script>

<p>Таким образом, в окрестности точки <script type="math/tex">\theta_0</script> мы приблизили <script type="math/tex">\risk</script> линейной функцией. Градиентные методы эксплуатируют это приближение, полагаясь на то, что минимизация <script type="math/tex">\risk</script> эквивалентная минимизации ее линейного приближения в небольшой окрестности точки <script type="math/tex">\theta_0</script>. А что такое “небольшая окрестность”? Ограничим ее шаром с радиусом <script type="math/tex">\alpha</script> (<script type="math/tex">\mid\delta\mid \leq \alpha</script>), тогда на этой окрестности минимум будет достигаться при</p>

<script type="math/tex; mode=display">
\delta_* = \arg\min\limits_{|\delta|\leq \alpha} \risk(\theta_0) + \nabla \risk(\theta)\delta = - \alpha\frac{\nabla \risk(\theta)}{|\nabla \risk(\theta)|}.
</script>

<p>Фактически, мы сделали шажок длиной <script type="math/tex">\alpha</script> в направлении <em>противоположном</em> направлению градиента <script type="math/tex">\nabla \risk(\theta)</script>. В этом и заключается основная идея градиентных методов: шаг за шагом, спускаться против направления градиента к минимуму. С этими знаниями можем уже сформулировать простенький алгоритм оптимизации</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{eqnarray*}
&\textbf{def}& \; \text{simple_gradient_descent}(\risk, \, \theta_0, \, \alpha):
\\
& \quad & k \leftarrow 0
\\
& \quad & \textbf{while} \; not \; tired \; \textbf{do} :
\\
& \quad & \qquad k \leftarrow k + 1
\\
& \quad & \qquad \theta_k \leftarrow \theta_{k-1} - \alpha\frac{\nabla \risk(\theta_{k-1})}{|\nabla \risk(\theta_{k-1})|}
\end{eqnarray*}
 %]]&gt;</script>

<p>Действительно, ничего сложного: один за другим делаем шажочки длиной <script type="math/tex">\alpha</script> против направления градиента, пока значение функции уменьшается, а как только перестает — останавливается.
Звучит разумно, но у этого алгоритма есть серьезный недостаток: он учитывает только направление, но не длину градиента. Так мы можем cделать слишком маленький шаг там, где градиент велик тем самым увеличив количество итерации, либо слишком большой шаг там, где градиент мал, пройдя мимо точки оптимума</p>

<p>К счастью, мы можем избавится от этих недостатков, немного изменив наш алгоритм</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{eqnarray*}
&\textbf{def}& \; \text{gradient_descent}(\risk, \, \theta_0, \, \alpha):
\\
& \quad & k \leftarrow 0
\\
& \quad & \textbf{while} \; not \; tired \; \textbf{do} :
\\
& \quad & \qquad k \leftarrow k + 1
\\
& \quad & \qquad \theta_k \leftarrow \theta_{k-1} - \alpha_k\nabla \risk(\theta_{k-1})
\end{eqnarray*}
 %]]&gt;</script>

<p>Этот “алгоритм” есть ни что иное, как известный метод <em>градиентного спуска</em> (<em>gradient descent</em>). Известно, что при некоторых условиях на <script type="math/tex">\risk</script> и <script type="math/tex">\alpha_k</script> (например, <script type="math/tex">\risk</script> выпукла, <script type="math/tex">\nabla \risk</script> удовлетворяет условию Липшица, а <script type="math/tex">\alpha_k = \alpha</script> ), значение <script type="math/tex">\risk</script> в оценках метода градиентного спуска <script type="math/tex">\theta_k</script> стремится к оптимальному</p>

<script type="math/tex; mode=display">
|\risk(\theta_k) - \risk_*| \xrightarrow{k\to\infty} 0
</script>

<p>— это не может не радовать.</p>

<p>Теперь у нас есть теоретически обоснованный алгоритм оптимизации, пора применить его в боевых условиях.</p>

<h2 id="section-4">Пример. Линейная регрессия с использованием метода градиентного спуска</h2>

<p>Выше мы уже упомянали задачу линейной регрессии (с квадратичной функцией ошибки). Напомним ее целевую функцию <script type="math/tex">\risk</script>:</p>

<script type="math/tex; mode=display">
\risk(\theta) = \sum_{i=1}^N (x_i^T\theta - y_i)^2 \to \min\limits_{\theta},
</script>

<p>В матричном виде она записывается как</p>

<script type="math/tex; mode=display">
\risk(\theta) = ||X\theta - y||_2^2 = (X\theta - y)^T (X\theta - y) \to \min\limits_{\theta},
</script>

<p>где <script type="math/tex">X\in\mathbb{R}^{N\times p}</script> — матрица, чьи строки — <script type="math/tex">x_i</script>, а <script type="math/tex">y = (y_1,\ldots,y_N)</script>.
Существует аналитическое решение этой задачи: <script type="math/tex">\hat\theta = (X^T X)^{-1} X^T y</script> (оценка <a href="http://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D1%82%D0%BE%D0%B4_%D0%BD%D0%B0%D0%B8%D0%BC%D0%B5%D0%BD%D1%8C%D1%88%D0%B8%D1%85_%D0%BA%D0%B2%D0%B0%D0%B4%D1%80%D0%B0%D1%82%D0%BE%D0%B2">методом наименьших квадратов</a>). Но, во-первых, операция обращения матрицы довольно <a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%B0%D1%8\risk_%D0%BC%D0%B0%D1%82%D1%80%D0%B8%D1%86%D0%B0#.D0.A1.D0.B\risk.D0.BE.D1.81.D0.BE.D0.B1.D1.8B_.D0.BD.D0.B0.D1.85.D0.BE.D0.B6.D0.B4.D0.B5.D0.BD.D0.B8.D1.8\risk_.D0.BE.D0.B1.D1.80.D0.B0.D1.82.D0.BD.D0.BE.D0.B9_.D0.BC.D0.B0.D1.82.D1.80.D0.B8.D1.86.D1.8B">дорогая</a>, а во-вторых, про существования аналитического решения мы можем и не знать. Допустим, что по определенным причинам мы не можем воспользоваться аналитической формулой.
К счастью, наша функция <script type="math/tex">\risk</script> удовлетворяет всем необходимым условиям и для нее выполняется соотношение <script type="math/tex">|\risk(\theta_k) - \risk_*| \xrightarrow{k\to\infty} 0</script>. Поэтому, мы имеем полное право воспользоваться методом градиентного спуска.</p>

<p>В первую очередь нам нужны данные: <script type="math/tex">\{x_i, y_i\}_1^N</script>, для простоты возьмем модельные (<script type="math/tex">N=1000</script>):</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{eqnarray*}
&x^{(1)}_i & \sim \mathcal{N}(0, 1), \quad &i=1,\ldots, 1000
\\
& y_i &= 2 x^{(1)}_i - 0.5 + \varepsilon_i, \qquad &\varepsilon_i \sim \mathcal{N}(0, 1).
\end{eqnarray*}
 %]]&gt;</script>

<p>То есть все <script type="math/tex">x_i^{(1)}</script> распределены по стандартному нормальному закону, а <script type="math/tex">y_i</script> — линейная функция от <script type="math/tex">x_i^{(1)}</script> с аддитивной помехой (так же имеющей стандртное нормальное распределение). Ниже изображены эти данные в плоскости <script type="math/tex">(x^{(1)}, y)</script>.
<img src="http://s18.postimg.org/tzp829i95/data.png" alt="data" /></p>

<p>“Лишний” индекс <script type="math/tex">(1)</script> к <script type="math/tex">x^{(1)}</script> мы добавили не спроста: если обозначить <script type="math/tex">x_i^{(2)}=1</script> для всех <script type="math/tex">i</script>, то можно переписать <script type="math/tex">y_i = 2 x_i^{(1)} - \frac{1}{2}x_i^{(2)} + \varepsilon_i</script> и более того</p>

<script type="math/tex; mode=display">y = X\theta_* + \varepsilon.</script>

<p>где <script type="math/tex">y=(y_1,\ldots,y_n)^T</script>, <script type="math/tex">X = \left(x_i^{(j)}\right)_{i,j}</script>, <script type="math/tex">\varepsilon=(\varepsilon_1,\ldots,\varepsilon_n)^T</script>, а <script type="math/tex">\theta_*=(2, -\frac{1}{2})</script>.</p>

<p>Итак, мы определили <script type="math/tex">X</script> и <script type="math/tex">y</script> (и неизвестный нам по легенде <script type="math/tex">\theta_*</script>). Для того, чтобы воспользоваться методом градиентного спуска остается найти производную <script type="math/tex">\nabla \risk</script>, что довольно просто:</p>

<script type="math/tex; mode=display">
\nabla \risk(\theta) =\nabla_\theta (X\theta - y)^T (X\theta - y) = X^T (X\theta - y).
</script>

<p>Теперь все готово. Остается применить метод градиентного спуска к задаче линейной регрессии с сгенерированными нами данными.
Зададим <script type="math/tex">\alpha=0.0001</script>. Ниже иллюстрируется работа нашего алгоритма: как изменялась линия регрессии, построенная по оценкам <script type="math/tex">(\theta_k^{(1)},\theta_k^{(2)})</script>, на каждой итерации.</p>

<p><img src="http://gifyu.com/images/LinearRegression_GradientDescent_50iter.gif" alt="wow" /></p>

<h1 id="section-5">Заключение</h1>
<p>Надеюсь, мне удалось ответить на вопросы, заданные в самом начале статьи. Мы поставили общую задачу оптимизации, на паре примеров узнали как она связана с задачей машинного обучения, и логично пришли к методу градиентного спуска, даже применив его на практике. Вполне неплохо, в последующих статьях я постараюсь лучше раскрыть тему применения алгоритмов оптимизации в машинном обучении и прояснить некоторые интересные детали.</p>

<p>На последок, порекомендую пару интересных материалов по теме.</p>

<ul>
  <li><a href="http://www.ozon.ru/context/detail/id/1892727/">Введение в оптимизацию. Поляк Б.Т.</a> — книга от ученого с мировым именем, не только формальным, но и доступным языком рассказывает об основнах оптимизации, помогая уяснить в первую очередь не конкретные задачи и метода, а идеи, стоящие за ними;</li>
  <li><a href="http://web.stanford.edu/class/ee364a/">EE364a: Convex Optimization. Бойд С.</a> — записанные курсы Стэндфордского университета по выпуклой оптимизации (мы этого еще не знаем, но методы выпуклой оптимизации — если не самые важные, то абсолютно незаменимые в машинном обучении);</li>
  <li><a href="http://www.machinelearning.ru/wiki/index.php?title=%D0%9C%D0%B5%D1%82%D0%BE%D0%B4%D1%8B_%D0%BE%D0%BF%D1%82%D0%B8%D0%BC%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8_%D0%B2_%D0%BC%D0%B0%D1%88%D0%B8%D0%BD%D0%BD%D0%BE%D0%BC_%D0%BE%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B8_%28%D0%BA%D1%83%D1%80%D1%81_%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B9%29">Методы оптимизации в машинном обучении. Кропотов Д.А.</a> — развернутое содержание курса лекций факультета вычислительной математики и кибернетики МГУ. Без конспектов, к сожалению но с отличной подборкой литературы.</li>
</ul>

<p>До встречи!</p>

]]></content>
  </entry>
  
</feed>
